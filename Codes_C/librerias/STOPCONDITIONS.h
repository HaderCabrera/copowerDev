/**
 * @file STOPCONDITIONS.h
 * @ingroup Application
 * This file includes all functions around Stop Conditions
 * of Bergsfjord Hydro Power Plant
 *
 * @remarks
 * @  
 * @author aes
 * @date 05-sep-2006
 *
 * changes:
 * 05.11.2007  ver 1001 GFH
 * sort stopconditions by priority to see most important text at infofield
 * 1007 22.01.2008 GFH  add StopCondition 70208
 * 1008 29.01.2008 RMI	SC's for parameterizable digital inputs (messages), STOP_initialize
 * 1010 05.02.2008 MVO  SC 30029 removed -> par message 02
 * 1011 17.03.2008 GFH  include input/output assignements
 * 1011 20.03.2008 RMI  20351 (SCANIA amber lamp), 70351, 70352 (SCANIA red lamp, CAN-communication)
 * 1011 14.05.2008 GFH  new stopconditions: 70210, 70211, 70212, 70213
 * 1238	02.10.2008 RMI	cooling water pressure stopconditions: 50160-50163, 70247, 70248
 * 1239 15.10.2008 RMI  generator tip fuse blown: 20500, heating water sc's: 70260-70265, 20046
 * 1239 22.10.2008 RMI	CH4 stopconditions: 50165-50168
 * 1239	27.10.2008 RMI  70250,70251 (throttle position SC's), 10214 (coolant water flow)
 * 1240 31.10.2008 MVO  50147, 50170 (mains power)
 * 1301 20.11.2008 MVO  50679, 50680, 70680
 * 1302 02.12.2008 RMI	20010, 10215, 10216
 * 1303 08.12.2008 RMI	50681 heat control (rmiHC)
 * 1303 09.12.2008 RMI  STOPCONDITION_50157 eliminated (now 20044 used instead)
 * 1306	18.12.2008 RMI  STOPCOND_50620... 50623, 50625
 * 1310 19.01.2009 RMI  STOPCOND_30649, mains power failure
 * 1310 28.01.2009 RMI  STOPCOND_70670.... for mains protection on SCM09
 * 1310 03.03.2009 RMI  STOPCOND_10105, ..10106 for tasks not running frequently
 * 1310 27.03.2009 RMI  STOPCOND_20018 (IOM 8)
 * 1310 03.04.2009 GFH  support of "2 gas line operation" and debugging "standby operation"
 * 1311 16.04.2009 RMI  elimination of obsolete SC's, because of DEIF-system size (rmiDEIF)
 * 1314 03.07.2009 RMI  STOPCONDITION_30680......30684
 * 1315 24.07.2009 RMI  STOPCONDITION_30669 / 70669 (under voltage sequence)
 * 1315 27.07.2009 RMI  STOPCONDITION_50190 / 50199 (short circuit / wire break of windings/bearings)
 * 1315 27.07.2009 RMI  STOPCONDITION_30683/30684 substituted by 20050/20051
 *      04.11.2009 GFH  deviation of receiver pressure in control mode
 *                      max deviation time changed from 30s to 3s for a faster reaction in case of a damaged cylinder inlet valve
 *                      stopcondition changed from level 7 to level 3
 * 1324 17.11.2009 RMI  STOPCONDITION_20100..., 70601... of ignition supervision
 * 1326 09.12.2009 RMI  STOPCONDITION_70066 (no cranking speed detected)
 * 1326 16.12.2009 RMI  STOPCONDITION_10107, 10108 (SCM02/SCM09 fault)
 * 1326 17.12.2009 RMI  ignitiion SC's, rmiIGNA
 * 1328 25.01.2010 RMI	STOP_ClearAllLevels, rmiSPT
 * 1328 05.02.2010 GFH	SCLOG at fixed NOVRAM area
 * 1328 15.02.2010 RMI	STOPCONDITION_10100: SW download error
 * 1332 22.03.2010 RMI  STOP.AtLeastOneScSet, needed for fault text, rmi100322
 * 1333 01.07.2010 GFH	loadsharing - power management system
 * 1334 01.07.2010 RMI	ARCNET-StopConditions: 30350-30365
 * 1341 25.08.2010 GFH	3x par. PID regulators
 * 1341 25.08.2010 GFH	4th par. PID regulator
 * 1341 30.08.2010 GFH	AO for GK, NK and SWK
 * 1343 08.11.2010 GFH  option: cylinder temperature monitoring
 * 1343 18.01.2011 GFH	new protection functions: grid overvoltage delayed (delta / star)
 * 1344 03.03.2011 RMI  STOPCONDITION_70249, the same as 70243, but only warning,  rmiBOPS
 * 1344 04.03.2011 RMI  SC 70262 deleted (redundand to 70208), rmiDRPS 
 * 1351 07.04.2011 RMI  define for mains relevant bitmask: STOP_BITMASK_MAINS_RELEVANT
 * 1351 08.04.2011 RMI  SC 70259, sensor fault gas flow
 * 1364 13.07.2011 RMI  STOPCONDITION_ARRAY_SIZE corrected
 * 1410 22.03.2012 GFH  gas warning without stop
 * 1421 22.05.2013 GFH  grid protection and control according to VDE AR-N 4105 - 2013
 * 1422 16.09.2013 GFH  support of gas mixer with analogue control
 *
 */
 
#ifndef STOPCONDITIONS_H_
#define STOPCONDITIONS_H_

#include "options.h"
#include "deif_types.h"
#include "systemtime.h"					// DTIMESTAMP
#include "MAIN_CONTROL.h" 

//
#define STOP_BIT_MASK_BIT1	0x0001
#define STOP_BIT_MASK_BIT2	0x0002
#define STOP_BIT_MASK_BIT3	0x0004
#define STOP_BIT_MASK_BIT4	0x0008
#define STOP_BIT_MASK_BIT5	0x0010
#define STOP_BIT_MASK_BIT6	0x0020
#define STOP_BIT_MASK_BIT7	0x0040
#define STOP_BIT_MASK_BIT8	0x0080
#define STOP_BIT_MASK_BIT9	0x0100
#define STOP_BIT_MASK_BIT10	0x0200
#define STOP_BIT_MASK_BIT11	0x0400
#define STOP_BIT_MASK_BIT12	0x0800
#define STOP_BIT_MASK_BIT13	0x1000
#define STOP_BIT_MASK_BIT14	0x2000
#define STOP_BIT_MASK_BIT15	0x4000
#define STOP_BIT_MASK_BIT16	0x8000

// block digital output
#define BLOCK_DO_ENGINE_COOLING_PUMP	0
#define BLOCK_DO_GAS_COMPRESSOR			1
#define BLOCK_DO_OUTPUT_1				2
#define BLOCK_DO_OUTPUT_2				3
#define BLOCK_DO_OUTPUT_3				4
#define BLOCK_DO_OUTPUT_4				5
#define BLOCK_DO_OUTPUT_5				6
#define BLOCK_DO_TOTAL					7


typedef enum 
{ STOPCONDITION_0,
  STOPCONDITION_1, // Temporary SC

  STOPCONDITION_101,
  STOPCONDITION_102,

  STOPCONDITION_20002,		// file from different project
  STOPCONDITION_20003,		// file from test version
  STOPCONDITION_20004,		// file from older version (incompatible)
  STOPCONDITION_70209,		// file transfer parameter failed

  STOPCONDITION_72000,
  STOPCONDITION_72001,
  STOPCONDITION_72002,
  STOPCONDITION_72003,
  STOPCONDITION_72004,
  STOPCONDITION_72005,
  STOPCONDITION_72006,
  STOPCONDITION_72007,
  STOPCONDITION_72008,
  STOPCONDITION_72009,
  STOPCONDITION_72010,
  STOPCONDITION_72011,
  STOPCONDITION_72012,
  STOPCONDITION_72013,
  STOPCONDITION_72014,
  STOPCONDITION_72015,
  STOPCONDITION_72016,
  STOPCONDITION_72017,
  STOPCONDITION_72018,
  STOPCONDITION_72019,

  STOPCONDITION_10999,      // wrong configuration (CAN)
  STOPCONDITION_10998,      // wrong configuration (SERIAL)
  STOPCONDITION_11000,		// reboot necessary

  STOPCONDITION_10100,		// sw download error
  STOPCONDITION_10101,
  STOPCONDITION_10102,
  STOPCONDITION_10103,
  STOPCONDITION_10104,
  STOPCONDITION_10105,		// 100msec task not running frequently (enough)
  STOPCONDITION_10106,		// 1000msec task not running frequently (enough)
  STOPCONDITION_10107,		// SCM02 fault
  STOPCONDITION_10108,		// SCM09 fault
  STOPCONDITION_10110,		// rmiRED
  STOPCONDITION_10111,
  STOPCONDITION_10112,
  STOPCONDITION_10113,
  STOPCONDITION_10201,
  //STOPCONDITION_10202,
  //STOPCONDITION_10203,
  //STOPCONDITION_10204,
  STOPCONDITION_10205,
  //STOPCONDITION_10206,
  STOPCONDITION_10207,
  STOPCONDITION_10208,
  STOPCONDITION_10209,
  STOPCONDITION_10210,
  STOPCONDITION_10211,
  STOPCONDITION_10212,
  STOPCONDITION_10213,
  //STOPCONDITION_10214,	// coolant water flow.
  
  STOPCONDITION_10215,	// gas A temperature limiter
  STOPCONDITION_10216,	// gas B temperature limiter
  STOPCONDITION_10217,
  
// start new stopconditions for IO assignement
  STOPCONDITION_10331,
  STOPCONDITION_10332,
  STOPCONDITION_10333,
  STOPCONDITION_10334,
  STOPCONDITION_10335,
  STOPCONDITION_10336,
  STOPCONDITION_10337,
  STOPCONDITION_10338,
  STOPCONDITION_10339,
  STOPCONDITION_10340,
  STOPCONDITION_10341,
// end new stopconditions for IO assignement

  STOPCONDITION_20010,		//rmiGASB
  STOPCONDITION_20012,
  STOPCONDITION_20013,
  STOPCONDITION_20014,
  STOPCONDITION_20015,
  STOPCONDITION_20016,
  STOPCONDITION_20017,
  STOPCONDITION_20018,
  STOPCONDITION_20019, 
  STOPCONDITION_20020,
  //STOPCONDITION_20021, 
  STOPCONDITION_20022,
  STOPCONDITION_20023,
  STOPCONDITION_20024,
  STOPCONDITION_20025,
  //STOPCONDITION_20026,
  STOPCONDITION_20027,
  STOPCONDITION_20028,
  //STOPCONDITION_20029,
  //STOPCONDITION_20030,
  //STOPCONDITION_20031,
  //STOPCONDITION_20032,
  STOPCONDITION_20033,
  STOPCONDITION_20034,
  STOPCONDITION_20035,
  STOPCONDITION_20036,
  //STOPCONDITION_20037,
  STOPCONDITION_20038,
  STOPCONDITION_20039,
  STOPCONDITION_20040,
  STOPCONDITION_20041,
  STOPCONDITION_20042,
  STOPCONDITION_20043,
  STOPCONDITION_20044,
  STOPCONDITION_20045,
  STOPCONDITION_20046,
  STOPCONDITION_20047,
  STOPCONDITION_20048,
  STOPCONDITION_20049,
  STOPCONDITION_20050,
  STOPCONDITION_20051,
  STOPCONDITION_20052,
  STOPCONDITION_20053,
  STOPCONDITION_20054,
  STOPCONDITION_20055,
  STOPCONDITION_20056,
  STOPCONDITION_20057,
  STOPCONDITION_20058,
  STOPCONDITION_20061,
  STOPCONDITION_20062,
  STOPCONDITION_20093,
  STOPCONDITION_20094,
  STOPCONDITION_20095,
  STOPCONDITION_20096,
  STOPCONDITION_20097,
  STOPCONDITION_20098,
  STOPCONDITION_20099,
  
  // ignition stop conditions, rmiIGNC
  STOPCONDITION_20100,
  STOPCONDITION_20101, // IC92x Communication Error
  STOPCONDITION_20102, // IC92x Common Shutdown
  STOPCONDITION_20128,

  STOPCONDITION_20137,
  STOPCONDITION_20138,
  STOPCONDITION_20139,

  STOPCONDITION_20140,
  STOPCONDITION_20141,
  STOPCONDITION_20142,
  STOPCONDITION_20143,
  STOPCONDITION_20144,
  STOPCONDITION_20145,

  STOPCONDITION_20146,
  STOPCONDITION_20147,
  STOPCONDITION_20152,
  STOPCONDITION_20153,
  STOPCONDITION_20154,
  STOPCONDITION_20155,
  STOPCONDITION_20156,
  STOPCONDITION_20157,
  STOPCONDITION_20158,
  STOPCONDITION_20159,
  STOPCONDITION_20160,
  STOPCONDITION_20161,
  STOPCONDITION_20162,
  STOPCONDITION_20163,
  STOPCONDITION_20200,

  STOPCONDITION_20400,
  STOPCONDITION_20401,
  STOPCONDITION_20402,
  STOPCONDITION_20403,
  STOPCONDITION_20404,
  STOPCONDITION_20405,
  STOPCONDITION_20406,


#ifdef CANDEFINED
  STOPCONDITION_20351,	//stop light of SCANIA-EMS
#endif
  STOPCONDITION_20500,
  STOPCONDITION_20501,
  STOPCONDITION_20502,
  STOPCONDITION_20503,
  STOPCONDITION_20504,
  STOPCONDITION_20505,
  STOPCONDITION_20506,
  STOPCONDITION_20507,
  STOPCONDITION_20508,
  STOPCONDITION_20509,
  STOPCONDITION_20510,
  STOPCONDITION_20511,
  STOPCONDITION_20512,
  STOPCONDITION_20513,
  STOPCONDITION_20515,
  STOPCONDITION_20516,
  STOPCONDITION_20517,
  STOPCONDITION_20518,
  STOPCONDITION_20519,
  STOPCONDITION_20520,
  STOPCONDITION_20521,
  STOPCONDITION_20522,
  STOPCONDITION_20523,
  STOPCONDITION_20524,
  STOPCONDITION_20525,
  STOPCONDITION_20526,
  STOPCONDITION_20527,
  STOPCONDITION_20528,
  STOPCONDITION_20529,
  STOPCONDITION_20530,
  STOPCONDITION_20531,
  STOPCONDITION_20532,
  STOPCONDITION_20534,
  STOPCONDITION_20600,
  STOPCONDITION_20814,

  STOPCONDITION_20001,
// rmiDEIF  STOPCONDITION_20011,

  STOPCONDITION_21205,
  STOPCONDITION_21206,

  STOPCONDITION_30231,
  
  STOPCONDITION_30349,
  STOPCONDITION_30350, 			// rmiARC
  STOPCONDITION_30351, 			// rmiARC
  STOPCONDITION_30352, 			// rmiARC
  STOPCONDITION_30353, 			// rmiARC
  STOPCONDITION_30354, 			// rmiARC
  STOPCONDITION_30355, 			// rmiARC
  STOPCONDITION_30356, 			// rmiARC
  STOPCONDITION_30357, 			// rmiARC
  STOPCONDITION_30358, 			// rmiARC
  STOPCONDITION_30359, 			// rmiARC
  STOPCONDITION_30360, 			// rmiARC
  STOPCONDITION_30361, 			// rmiARC
  STOPCONDITION_30362, 			// rmiARC
  STOPCONDITION_30363, 			// rmiARC
  STOPCONDITION_30364, 			// rmiARC
  STOPCONDITION_30365, 			// rmiARC
 
  STOPCONDITION_30610,
  STOPCONDITION_30611,
  STOPCONDITION_30612,
  STOPCONDITION_30613,
  STOPCONDITION_30614,			// rmiIET
  STOPCONDITION_30615,
  STOPCONDITION_30001,
  STOPCONDITION_30002,
// rmiDEIF    STOPCONDITION_30011,
  STOPCONDITION_30018,
  STOPCONDITION_30019,
  STOPCONDITION_30020,
  STOPCONDITION_30021,// rmiEPF
  STOPCONDITION_30022,// rmiEPF
  STOPCONDITION_30029,
  STOPCONDITION_30030,
  //STOPCONDITION_30031,
  //STOPCONDITION_30032,
  STOPCONDITION_30035,
  STOPCONDITION_30630,
  STOPCONDITION_30631,
  STOPCONDITION_30632,
  STOPCONDITION_30633,
  STOPCONDITION_30634,
  STOPCONDITION_30635,
  STOPCONDITION_30636,
  STOPCONDITION_30638,
  STOPCONDITION_30639,
  STOPCONDITION_30649,
  STOPCONDITION_30650,
  STOPCONDITION_30651,
  STOPCONDITION_30652,
  STOPCONDITION_30653,
  STOPCONDITION_30654,
  STOPCONDITION_30655,
  STOPCONDITION_30656,
  STOPCONDITION_30657,
  STOPCONDITION_30660,
  STOPCONDITION_30661,
  STOPCONDITION_30662,
  STOPCONDITION_30663,
  STOPCONDITION_30664,
  STOPCONDITION_30665,
  STOPCONDITION_30666,
  STOPCONDITION_30667,
  STOPCONDITION_30668,
  STOPCONDITION_30669,		// rmiPROF
  STOPCONDITION_30670,
  STOPCONDITION_30671,
  STOPCONDITION_30672,
  STOPCONDITION_30673,
  STOPCONDITION_30674,
  STOPCONDITION_30675,
  STOPCONDITION_30676,
  STOPCONDITION_30677,
  STOPCONDITION_30678,
  STOPCONDITION_30679,
  STOPCONDITION_30680,
  STOPCONDITION_30681,
  STOPCONDITION_30682,
  STOPCONDITION_30683,
  STOPCONDITION_30684,
  STOPCONDITION_30685,
  STOPCONDITION_30686,
  
  STOPCONDITION_30700,
  STOPCONDITION_30701,
  STOPCONDITION_30702,
  STOPCONDITION_30703,
  STOPCONDITION_30704,
  
// rmiDEIF    STOPCONDITION_30820,
// rmiDEIF    STOPCONDITION_30840,
// rmiDEIF    STOPCONDITION_30841,
// rmiDEIF    STOPCONDITION_30842,
// rmiDEIF    STOPCONDITION_30843,
// rmiDEIF    STOPCONDITION_30844,
// rmiDEIF    STOPCONDITION_30845,
// rmiDEIF    STOPCONDITION_30846,
// rmiDEIF    STOPCONDITION_30847,
  
// rmiDEIF    STOPCONDITION_40707, // not used
// rmiDEIF    STOPCONDITION_40022, // not used
// rmiDEIF    STOPCONDITION_40001, // not used
// rmiDEIF    STOPCONDITION_40011, // not used

// regular stop (bit mask 0x0001)
  //STOPCONDITION_50084,
  //STOPCONDITION_50085,
  //STOPCONDITION_50126,
  //STOPCONDITION_50025,
  //STOPCONDITION_50026,
  //STOPCONDITION_50029,
  //STOPCONDITION_50030,
  STOPCONDITION_50031,
  STOPCONDITION_50032,
  STOPCONDITION_50033,
  STOPCONDITION_50034,
  STOPCONDITION_50035,
  STOPCONDITION_50040,
  //STOPCONDITION_50041,
  STOPCONDITION_50057,
  //STOPCONDITION_50058,
  STOPCONDITION_50070,
  STOPCONDITION_50072,
  STOPCONDITION_50128,
  //STOPCONDITION_50074,
  //STOPCONDITION_50075,
  //STOPCONDITION_50076,
  STOPCONDITION_50077, // not used
  STOPCONDITION_50151,
  STOPCONDITION_50152,
  STOPCONDITION_50153,
  STOPCONDITION_50154,
  STOPCONDITION_50155,
  STOPCONDITION_50156,
  //STOPCONDITION_50157, 
  // rmi: cooling water pressure stop conditions (4)
  STOPCONDITION_50160,
  STOPCONDITION_50161,
  STOPCONDITION_50162,
  STOPCONDITION_50163,
  // rmiCH4: stop conditions (4)
  STOPCONDITION_50165,
  STOPCONDITION_50166,
  STOPCONDITION_50167,
  STOPCONDITION_50168,
  //STOPCONDITION_50169,
  STOPCONDITION_50170,
  // O2: stop condition
  STOPCONDITION_50175,
  STOPCONDITION_50180,
  STOPCONDITION_50181,
  STOPCONDITION_50182,
  STOPCONDITION_50183,
  // short circuit / sensor break of windings/bearings. rmiWIB
  STOPCONDITION_50190,
  STOPCONDITION_50191,
  STOPCONDITION_50192,
  STOPCONDITION_50193,
  STOPCONDITION_50194,
  STOPCONDITION_50195,
  STOPCONDITION_50196,
  STOPCONDITION_50197,
  STOPCONDITION_50198,
  STOPCONDITION_50199,
  STOPCONDITION_50200,
  STOPCONDITION_50201,
  
  //STOPCONDITION_50081,
  STOPCONDITION_50083,
  STOPCONDITION_50086,
  STOPCONDITION_50087,
  STOPCONDITION_50088,
  STOPCONDITION_50089,
  STOPCONDITION_50090,
  STOPCONDITION_50091,
  STOPCONDITION_50093,
  STOPCONDITION_50092,
  STOPCONDITION_50094,
  STOPCONDITION_50095,
  STOPCONDITION_50096,
  STOPCONDITION_50097,
  STOPCONDITION_50098,

#if (OPTION_CYLINDER_MONITORING == TRUE)
  STOPCONDITION_50101,
  STOPCONDITION_50102,
  STOPCONDITION_50103,
  STOPCONDITION_50104,
  STOPCONDITION_50105,
  STOPCONDITION_50106,
  STOPCONDITION_50107,
  STOPCONDITION_50108,
  STOPCONDITION_50109,
  STOPCONDITION_50110,
  STOPCONDITION_50111,
  STOPCONDITION_50112, 
  STOPCONDITION_50113,
  STOPCONDITION_50114,
  STOPCONDITION_50115,
  STOPCONDITION_50116,
  STOPCONDITION_50117,
  STOPCONDITION_50118,
  STOPCONDITION_50119,
  STOPCONDITION_50120,
#endif // OPTION_CYLINDER_MONITORING
  
  // rmiIGNA
  STOPCONDITION_50400,	
  STOPCONDITION_50401,	
  STOPCONDITION_50402,	
  STOPCONDITION_50420,	
  STOPCONDITION_50421,	
  STOPCONDITION_50422,	
  STOPCONDITION_50423,	
  STOPCONDITION_50424,	
  STOPCONDITION_50425,	

  // Modbus CPU95EVS
  STOPCONDITION_50430,
  STOPCONDITION_50431,
  STOPCONDITION_50432,
  STOPCONDITION_50450,
  STOPCONDITION_50451,
  STOPCONDITION_50452,
  STOPCONDITION_50453,
  STOPCONDITION_50454,
  STOPCONDITION_50455,

  STOPCONDITION_50620,	// rmiMB
  STOPCONDITION_50621,	// rmiMB
  STOPCONDITION_50622,	// rmiMB
  STOPCONDITION_50623,	// rmiMB
  STOPCONDITION_50624,	// rmiIET
  STOPCONDITION_50625,	// rmiMB
  STOPCONDITION_50679,
  STOPCONDITION_50680,
  STOPCONDITION_50681,	// heat control (rmiHC)
  STOPCONDITION_50682,
  STOPCONDITION_50809,
  STOPCONDITION_50810,
  STOPCONDITION_50811,
  STOPCONDITION_50812,
  STOPCONDITION_50813,
  STOPCONDITION_50814,
  STOPCONDITION_50815,
  STOPCONDITION_50816,
  STOPCONDITION_50817,
  STOPCONDITION_50818,
  STOPCONDITION_50819,
  STOPCONDITION_50820,
  STOPCONDITION_50821,
  STOPCONDITION_50822,
  STOPCONDITION_50823,
  STOPCONDITION_50824,
  STOPCONDITION_50825,
  STOPCONDITION_50826,
  STOPCONDITION_50827,
  STOPCONDITION_50828,
  STOPCONDITION_50829,
  STOPCONDITION_50830,
  STOPCONDITION_50831,
  STOPCONDITION_50832,
  STOPCONDITION_50833,
  STOPCONDITION_50834,
  STOPCONDITION_50835,

  //------------------
  
  STOPCONDITION_60026,
  //STOPCONDITION_70053,

// wire break supervision
  STOPCONDITION_50071,
  STOPCONDITION_50127,
  STOPCONDITION_50121,
  STOPCONDITION_50122,
  STOPCONDITION_50082,
  //STOPCONDITION_50073,
  //STOPCONDITION_50080,
  //STOPCONDITION_50020,
  //STOPCONDITION_50021,
  STOPCONDITION_50123, // not used
  STOPCONDITION_50124,
  STOPCONDITION_50125,
  STOPCONDITION_70100,
  STOPCONDITION_70101,

  STOPCONDITION_70142,
  STOPCONDITION_70143,
  STOPCONDITION_70144,

  //STOPCONDITION_70055,
  //STOPCONDITION_50118, 
  //STOPCONDITION_50119,
  //STOPCONDITION_50120,
  //STOPCONDITION_70061,
  //STOPCONDITION_70065,
  STOPCONDITION_70203,
  STOPCONDITION_70204,
  //STOPCONDITION_70205,
  STOPCONDITION_70208,

#if (OPTION_CYLINDER_MONITORING == TRUE)
  STOPCONDITION_50131,
  STOPCONDITION_50132,
  STOPCONDITION_50133,
  STOPCONDITION_50134,
  STOPCONDITION_50135,
  STOPCONDITION_50136,
  STOPCONDITION_50137,
  STOPCONDITION_50138,
  STOPCONDITION_50139,
  STOPCONDITION_50140,
  STOPCONDITION_50141,
  STOPCONDITION_50142,
  STOPCONDITION_50143,
  STOPCONDITION_50144,
  STOPCONDITION_50145,
  STOPCONDITION_50146,
  STOPCONDITION_50147,
  STOPCONDITION_50148,
  STOPCONDITION_50149,
  STOPCONDITION_50150,
#endif // OPTION_CYLINDER_MONITORING

  // ZS3
  STOPCONDITION_50211,
  STOPCONDITION_50212,
  STOPCONDITION_50213,
  STOPCONDITION_50214,
  STOPCONDITION_50215,
  STOPCONDITION_50216,
  STOPCONDITION_50217,
  STOPCONDITION_50218,
  STOPCONDITION_50219,
  STOPCONDITION_50220,
  STOPCONDITION_50221,
  STOPCONDITION_50222,
  STOPCONDITION_50223,
  STOPCONDITION_50224,
  STOPCONDITION_50225,
  STOPCONDITION_50226,
  STOPCONDITION_50227,
  STOPCONDITION_50228,
  STOPCONDITION_50229,
  STOPCONDITION_50230,

  STOPCONDITION_51220,

  STOPCONDITION_70210,
  STOPCONDITION_70211,
  STOPCONDITION_70212,
  STOPCONDITION_70213,
  STOPCONDITION_70214,
  STOPCONDITION_70274,
// service timer
  STOPCONDITION_70200,
  STOPCONDITION_70201,
  STOPCONDITION_70202,

  STOPCONDITION_50010,
  STOPCONDITION_50011,
  STOPCONDITION_50001,
// rmiDEIF    STOPCONDITION_50011, // not used

// rmiDEIF    STOPCONDITION_50022,
// rmiDEIF    STOPCONDITION_50023,
// rmiDEIF    STOPCONDITION_50024,
  //STOPCONDITION_50027,
  //STOPCONDITION_50028,
  //STOPCONDITION_50042,
  //STOPCONDITION_50059, 
  //STOPCONDITION_50060,
  //STOPCONDITION_50078,
  //STOPCONDITION_50079,
// rmiDEIF    STOPCONDITION_50604, // no text

// manual stop by operator 
  STOPCONDITION_50002,
  STOPCONDITION_50005,
  STOPCONDITION_50099,
  STOPCONDITION_50100,

  STOPCONDITION_60010,
  STOPCONDITION_60011,
  STOPCONDITION_60001, // DKA
  STOPCONDITION_60002, // DKB
  
// RME selected by operator
  //STOPCONDITION_50125,
// rmiDEIF    STOPCONDITION_60001,   
// rmiDEIF    STOPCONDITION_60011, 	
  //rmiEPF STOPCONDITION_60022,
// rmiDEIF    STOPCONDITION_60023,
// rmiDEIF    STOPCONDITION_60024,
  //STOPCONDITION_60025,
  STOPCONDITION_60027,
  STOPCONDITION_60039,
  STOPCONDITION_60040,
  STOPCONDITION_60041,
  STOPCONDITION_60042,
  STOPCONDITION_60043,

#if (OPTION_CYLINDER_MONITORING == TRUE)
  STOPCONDITION_60061,
  STOPCONDITION_60062,
  STOPCONDITION_60063,
  STOPCONDITION_60064, 
  STOPCONDITION_60065,
  STOPCONDITION_60066,
  STOPCONDITION_60067,
  STOPCONDITION_60068,
  STOPCONDITION_60069,
  STOPCONDITION_60070,
  STOPCONDITION_60071,
  STOPCONDITION_60072,
  STOPCONDITION_60073,
  STOPCONDITION_60074,
  STOPCONDITION_60075,
  STOPCONDITION_60076,
  STOPCONDITION_60077,
  STOPCONDITION_60078,
  STOPCONDITION_60079,
  STOPCONDITION_60080,
  STOPCONDITION_60081,
  STOPCONDITION_60082, 
  STOPCONDITION_60083,
  STOPCONDITION_60084,
  STOPCONDITION_60085,
  STOPCONDITION_60086,
  STOPCONDITION_60087,
  STOPCONDITION_60088,
  STOPCONDITION_60089,
  STOPCONDITION_60090,
  STOPCONDITION_60091,
  STOPCONDITION_60092,
  STOPCONDITION_60093,
  STOPCONDITION_60094,
  STOPCONDITION_60095,
  STOPCONDITION_60096,
  STOPCONDITION_60097,
  STOPCONDITION_60098,
  STOPCONDITION_60099,
  STOPCONDITION_60100,
  STOPCONDITION_60101,
  STOPCONDITION_60102,
  STOPCONDITION_60103,
  STOPCONDITION_60104,
  STOPCONDITION_60105,
  STOPCONDITION_60106,
  STOPCONDITION_60107,
  STOPCONDITION_60108,
  STOPCONDITION_60109,
  STOPCONDITION_60110,
  STOPCONDITION_60111,
  STOPCONDITION_60112,
  STOPCONDITION_60113,
  STOPCONDITION_60114, 
  STOPCONDITION_60115,
  STOPCONDITION_60116,
  STOPCONDITION_60117,
  STOPCONDITION_60118,
  STOPCONDITION_60119,
  STOPCONDITION_60120,
#endif // OPTION_CYLINDER_MONITORING

  STOPCONDITION_60121,
  STOPCONDITION_60122,
  STOPCONDITION_60123,
  STOPCONDITION_60124,
    
  STOPCONDITION_60126,
  STOPCONDITION_60127,
  STOPCONDITION_60128,
  STOPCONDITION_60129,
  STOPCONDITION_60130,
  STOPCONDITION_60131,
  STOPCONDITION_60132,
  STOPCONDITION_60133,
  STOPCONDITION_60140,
  STOPCONDITION_60141,
  STOPCONDITION_60142,
  STOPCONDITION_60143,
  STOPCONDITION_60144,
  STOPCONDITION_60145,
  STOPCONDITION_60146,
  STOPCONDITION_60147,
  STOPCONDITION_60148,
  STOPCONDITION_60149,
  STOPCONDITION_60150,
  STOPCONDITION_60151,
  //------------------

// rmiDEIF    STOPCONDITION_60601, // no text
// rmiDEIF    STOPCONDITION_60699, // no text

  STOPCONDITION_70000,

  STOPCONDITION_70001, // DKA
  STOPCONDITION_70002, // DKB

// rmiDEIF    STOPCONDITION_70011, // not used
  //STOPCONDITION_70020, // no text
  //STOPCONDITION_70021,
  //STOPCONDITION_70022,
  //STOPCONDITION_70023,
  //STOPCONDITION_70024,
  //STOPCONDITION_70025,
  //STOPCONDITION_70026,
  //STOPCONDITION_70027,
  //STOPCONDITION_70028,
  //STOPCONDITION_70029,
  //STOPCONDITION_70030,
  //STOPCONDITION_70031, 
  //STOPCONDITION_70032,
  //STOPCONDITION_70033,
  //STOPCONDITION_70034,
  //STOPCONDITION_70035,
  //STOPCONDITION_70036,
  //STOPCONDITION_70037,
  //STOPCONDITION_70038,
  //STOPCONDITION_70039,
  //STOPCONDITION_70040,
  //STOPCONDITION_70041,
  STOPCONDITION_70042,
  STOPCONDITION_70043,
  //STOPCONDITION_70044,
  //STOPCONDITION_70045,
  //STOPCONDITION_70046,
  //STOPCONDITION_70047,
  //STOPCONDITION_70048,
  //STOPCONDITION_70049,
  STOPCONDITION_70050,
  STOPCONDITION_70051,
  STOPCONDITION_70052,
  //STOPCONDITION_70054,
  //STOPCONDITION_70056,
  //STOPCONDITION_70057,
  //STOPCONDITION_70058,
  STOPCONDITION_70059,
  STOPCONDITION_70060,
  STOPCONDITION_70066,
  STOPCONDITION_70102, // IC92x Common Alarm
  STOPCONDITION_70110,
  STOPCONDITION_70112,
  //STOPCONDITION_70062,
  //STOPCONDITION_70063,
  //STOPCONDITION_70064,
  //STOPCONDITION_70206,
  //STOPCONDITION_70207,
  STOPCONDITION_70215,
  STOPCONDITION_70216,
  STOPCONDITION_70217,
  STOPCONDITION_70219,
  STOPCONDITION_70218,
  STOPCONDITION_70238,
  STOPCONDITION_70239,
  STOPCONDITION_70240,
  STOPCONDITION_70241,
  STOPCONDITION_70242,
  STOPCONDITION_70243,
  STOPCONDITION_70249,			// rmiBOPS: the same as 70243, but only warning, no stop
  
  // rmi, heating water stop conditions
  STOPCONDITION_70260,
  STOPCONDITION_70261,
  // rmiDRPS, 70208 is the same, STOPCONDITION_70262,
  STOPCONDITION_70263,
  STOPCONDITION_70264,
  STOPCONDITION_70265,
#ifdef CANDEFINED
  STOPCONDITION_70351,	//amber light of SCANIA-EMS
  STOPCONDITION_70352,	//SCANIA-EMS communication error
#endif
  STOPCONDITION_70353,

// rmiDEIF    STOPCONDITION_70401,	// no text
// rmiDEIF    STOPCONDITION_70607,	// no text

// stopconditions for gas mixer control

  STOPCONDITION_70220,
  STOPCONDITION_70221,
  STOPCONDITION_70222,
  STOPCONDITION_70223,
  STOPCONDITION_70224,
  STOPCONDITION_70225,
  STOPCONDITION_70226,
  STOPCONDITION_70227,
  STOPCONDITION_70228,
  STOPCONDITION_70229,
  STOPCONDITION_70230,
  STOPCONDITION_70231,
  STOPCONDITION_70232,
  STOPCONDITION_70233,
  STOPCONDITION_70234,
  STOPCONDITION_70235,
  STOPCONDITION_70236,
  STOPCONDITION_70237,
  
  STOPCONDITION_70152,
  STOPCONDITION_70153,
  STOPCONDITION_70154,
  STOPCONDITION_70155,
  STOPCONDITION_70156,
  STOPCONDITION_70160,
  STOPCONDITION_70161,
  STOPCONDITION_70162,
  STOPCONDITION_70163,
  STOPCONDITION_70164,
  STOPCONDITION_70165,
  STOPCONDITION_70166,
  STOPCONDITION_70167,
  STOPCONDITION_70168,
  STOPCONDITION_70169,
  STOPCONDITION_70170,
  STOPCONDITION_70171,
  STOPCONDITION_70172,
  STOPCONDITION_70173,
  STOPCONDITION_70174,
  STOPCONDITION_70175,
  STOPCONDITION_70176,
  STOPCONDITION_70177,
  STOPCONDITION_70178,
  STOPCONDITION_70179,
  STOPCONDITION_70180,
  STOPCONDITION_70181,
  STOPCONDITION_70182,
  STOPCONDITION_70183,
  STOPCONDITION_70184,
  STOPCONDITION_70185,
  STOPCONDITION_70186,
  STOPCONDITION_70187,
  STOPCONDITION_70188,
  STOPCONDITION_70189,
  STOPCONDITION_70190,
  STOPCONDITION_70191,
  STOPCONDITION_70192,
  STOPCONDITION_70193,
  STOPCONDITION_70194,
  STOPCONDITION_70195,
  STOPCONDITION_70196,
  STOPCONDITION_70197,
  STOPCONDITION_70244,
  STOPCONDITION_70245,
  STOPCONDITION_70246,
  // rmi: cooling water pressure warnings (2)
  STOPCONDITION_70247,
  STOPCONDITION_70248,
  STOPCONDITION_70250,	// wire break throttle position
  STOPCONDITION_70251,	// deviation of throttle position
  STOPCONDITION_70252,	// wire break turbo bypass
  STOPCONDITION_70253,	// deviation of turbo bypass position
  STOPCONDITION_70254,
  STOPCONDITION_70255,
  STOPCONDITION_70256,
  STOPCONDITION_70257,
  STOPCONDITION_70258,
  STOPCONDITION_70259,
  STOPCONDITION_70266,
  STOPCONDITION_70267,
  STOPCONDITION_70268,

  STOPCONDITION_70272,	// wire break turbo bypass 2
  STOPCONDITION_70273,	// deviation of turbo bypass 2 position

  STOPCONDITION_70277,
  STOPCONDITION_70278,
  STOPCONDITION_70279,
  STOPCONDITION_70280,
  STOPCONDITION_70281,
  STOPCONDITION_70282,
  STOPCONDITION_70283,
  //
  STOPCONDITION_70420,
  STOPCONDITION_70421,
  STOPCONDITION_70422,
  STOPCONDITION_70423,
  //
  STOPCONDITION_70450,
  STOPCONDITION_70451,
  // rmiEPF, == gridprotection SC's, if protection works on SCM09 (analog to 30670...30679)
  STOPCONDITION_70508,
  STOPCONDITION_70509,
  
  // Pre-Alarm for IGN-Stopconditions
  STOPCONDITION_70516,
  STOPCONDITION_70517,
  STOPCONDITION_70518,
  STOPCONDITION_70519,
  STOPCONDITION_70520,
  STOPCONDITION_70521,
  STOPCONDITION_70522,
  STOPCONDITION_70523,
  STOPCONDITION_70524,
  STOPCONDITION_70525,
  STOPCONDITION_70526,
  STOPCONDITION_70527,
  STOPCONDITION_70528,
  STOPCONDITION_70529,
  STOPCONDITION_70530,
  STOPCONDITION_70531,
  // Pre-Alarm for IGN-Stopconditions

  // ignition warning spark reference of 12 cylinders (must be contiguous !!!):
  STOPCONDITION_70601,
  STOPCONDITION_70602,
  STOPCONDITION_70603,
  STOPCONDITION_70604,
  STOPCONDITION_70605,
  STOPCONDITION_70606,
  STOPCONDITION_70607,
  STOPCONDITION_70608,
  STOPCONDITION_70609,
  STOPCONDITION_70610,
  STOPCONDITION_70611,
  STOPCONDITION_70612,

  STOPCONDITION_70660,
  STOPCONDITION_70661,
  STOPCONDITION_70662,
  STOPCONDITION_70663,
  STOPCONDITION_70664,
  STOPCONDITION_70665,
  STOPCONDITION_70666,
  STOPCONDITION_70667,
  STOPCONDITION_70668,
  STOPCONDITION_70669,	// rmiPROF
  STOPCONDITION_70670,
  STOPCONDITION_70671,
  STOPCONDITION_70672,
  STOPCONDITION_70673,
  STOPCONDITION_70674,
  STOPCONDITION_70675,
  STOPCONDITION_70676,
  STOPCONDITION_70677,
  STOPCONDITION_70678,
  STOPCONDITION_70679,
  STOPCONDITION_70686, // grid protection SCM09
  // rmiEPF, == endof gridprotection SC's for SCM09
  STOPCONDITION_70680,
  STOPCONDITION_70700,
  // do not change sequence: start
  STOPCONDITION_70701,
  STOPCONDITION_70702,
  STOPCONDITION_70703,
  STOPCONDITION_70704,
  STOPCONDITION_71705,
  // do not change sequence: end
  // mixer B
  STOPCONDITION_70705,
  STOPCONDITION_70706,
  STOPCONDITION_70707,
  STOPCONDITION_70708,
  STOPCONDITION_70709,
  STOPCONDITION_70710,
  STOPCONDITION_70711,
  STOPCONDITION_70712,
  STOPCONDITION_70713,
  STOPCONDITION_70714,
  STOPCONDITION_70715,
  // ZS3
  STOPCONDITION_70716,
  STOPCONDITION_70717,
  STOPCONDITION_70718,
  STOPCONDITION_70719,
  STOPCONDITION_70720,
  STOPCONDITION_70721,
  STOPCONDITION_70722,
  STOPCONDITION_70723,
  STOPCONDITION_70724,
  STOPCONDITION_70725,
  STOPCONDITION_70726,
  STOPCONDITION_70727,
  STOPCONDITION_70728,
  STOPCONDITION_70729,
  STOPCONDITION_70730,
  STOPCONDITION_70731,
  STOPCONDITION_70732,
  STOPCONDITION_70733,
  STOPCONDITION_70734,
  STOPCONDITION_70735,

  STOPCONDITION_70800,
  STOPCONDITION_70801,
  STOPCONDITION_70802,
  STOPCONDITION_70803,
  STOPCONDITION_70804,
  STOPCONDITION_70805,
  STOPCONDITION_70806,
  
  STOPCONDITION_70810,
  STOPCONDITION_70811,
  STOPCONDITION_70812,

  STOPCONDITION_70814,

  STOPCONDITION_70901,
  STOPCONDITION_70902,
  STOPCONDITION_70903,
  STOPCONDITION_70904,
  STOPCONDITION_70905,
  STOPCONDITION_70906,
  STOPCONDITION_70907,
  STOPCONDITION_70908,
  STOPCONDITION_70909,
  STOPCONDITION_70910,
  STOPCONDITION_70911,
  STOPCONDITION_70912,
  STOPCONDITION_70913,
  STOPCONDITION_70914,
  STOPCONDITION_70915,
  STOPCONDITION_70916,
  STOPCONDITION_70921,
  STOPCONDITION_70922,
  STOPCONDITION_70923,
  STOPCONDITION_70924,
  STOPCONDITION_70925,
  STOPCONDITION_70926,
  STOPCONDITION_70927,
  STOPCONDITION_70928,
  STOPCONDITION_70929,
  STOPCONDITION_70930,
  STOPCONDITION_70931,
  STOPCONDITION_70932,
  STOPCONDITION_70933,
  STOPCONDITION_70934,
  STOPCONDITION_70935,
  STOPCONDITION_70936,
  STOPCONDITION_70937,
  STOPCONDITION_70938,
  STOPCONDITION_70939,
  STOPCONDITION_70940,
  STOPCONDITION_70941,
  STOPCONDITION_70942,
  STOPCONDITION_70943,
  STOPCONDITION_70944,
  STOPCONDITION_70945,
  STOPCONDITION_70946,
  STOPCONDITION_70947,
  STOPCONDITION_70948,
  STOPCONDITION_70949,
  STOPCONDITION_70950,
  STOPCONDITION_70951,
  STOPCONDITION_70952,
  STOPCONDITION_70953,
  STOPCONDITION_70954,
  STOPCONDITION_70955,
  STOPCONDITION_70956,
  STOPCONDITION_70957,
  STOPCONDITION_70958,
  STOPCONDITION_70959,
  STOPCONDITION_70960,
  STOPCONDITION_70961,
  STOPCONDITION_70962,
  STOPCONDITION_70963,
  STOPCONDITION_70964,
  STOPCONDITION_70965,
  STOPCONDITION_70966,
  STOPCONDITION_70967,
  STOPCONDITION_70968,
  STOPCONDITION_70969,
  STOPCONDITION_70970,
  STOPCONDITION_70971,
  STOPCONDITION_70972,
  STOPCONDITION_70973,
  STOPCONDITION_70974,
  STOPCONDITION_70975,
  STOPCONDITION_70976,
  STOPCONDITION_70977,
  STOPCONDITION_70978,
  STOPCONDITION_70979,
  STOPCONDITION_70980,
  STOPCONDITION_70981,
  STOPCONDITION_70982,
  STOPCONDITION_70983,
  STOPCONDITION_70984,
  STOPCONDITION_70985,
  STOPCONDITION_70986,
  STOPCONDITION_70987,
  STOPCONDITION_70988,
  STOPCONDITION_70989,
  STOPCONDITION_70990,
  STOPCONDITION_70991,
  STOPCONDITION_70992,
  STOPCONDITION_70993,
  STOPCONDITION_70994,
  STOPCONDITION_70995,
  STOPCONDITION_70996,
  STOPCONDITION_70997,
  STOPCONDITION_70998,
  STOPCONDITION_70999,
  STOPCONDITION_71000,
  STOPCONDITION_71001,
  STOPCONDITION_71002,
  STOPCONDITION_71003,
  STOPCONDITION_71004,
  STOPCONDITION_71005,
  STOPCONDITION_71006,
  STOPCONDITION_71007,
  STOPCONDITION_71008,
  STOPCONDITION_71009,
  STOPCONDITION_71010,
  STOPCONDITION_71011,
  STOPCONDITION_71012,
  STOPCONDITION_71013,
  STOPCONDITION_71014,
  STOPCONDITION_71015,
  STOPCONDITION_71016,
  STOPCONDITION_71017,
  STOPCONDITION_71018,
  STOPCONDITION_71019,
  STOPCONDITION_71020,
  STOPCONDITION_71021,
  STOPCONDITION_71022,
  STOPCONDITION_71023,
  STOPCONDITION_71024,

  STOPCONDITION_71026,
  STOPCONDITION_71027,
  STOPCONDITION_71028,
  STOPCONDITION_71029,
  STOPCONDITION_71030,
  STOPCONDITION_71031,
  STOPCONDITION_71032,
  STOPCONDITION_71033,
  STOPCONDITION_71034,
  STOPCONDITION_71035,
  STOPCONDITION_71036,
  STOPCONDITION_71037,
  STOPCONDITION_71038,
  STOPCONDITION_71039,
  STOPCONDITION_71040,
  STOPCONDITION_71041,
  STOPCONDITION_71042,
  STOPCONDITION_71043,
  STOPCONDITION_71044,
  STOPCONDITION_71045,
  STOPCONDITION_71046,
  STOPCONDITION_71047,
  STOPCONDITION_71048,
  STOPCONDITION_71049,
  STOPCONDITION_71050,
  STOPCONDITION_71051,
  STOPCONDITION_71052,
  STOPCONDITION_71053,
  STOPCONDITION_71054,
  STOPCONDITION_71055,
  STOPCONDITION_71056,
  STOPCONDITION_71057,
  STOPCONDITION_71058,
  STOPCONDITION_71059,
  STOPCONDITION_71060,
  STOPCONDITION_71061,
  STOPCONDITION_71062,
  STOPCONDITION_71063,
  STOPCONDITION_71064,
  STOPCONDITION_71065,
  STOPCONDITION_71066,
  STOPCONDITION_71067,
  STOPCONDITION_71068,
  STOPCONDITION_71069,
  STOPCONDITION_71070,
  STOPCONDITION_71071,
  STOPCONDITION_71072,
  STOPCONDITION_71073,
  STOPCONDITION_71074,
  STOPCONDITION_71075,
  STOPCONDITION_71076,
  STOPCONDITION_71077,
  STOPCONDITION_71078,
  STOPCONDITION_71079,
  STOPCONDITION_71080,
  STOPCONDITION_71081,
  STOPCONDITION_71082,
  STOPCONDITION_71083,
  STOPCONDITION_71084,
  STOPCONDITION_71085,
  STOPCONDITION_71086,
  STOPCONDITION_71087,
  STOPCONDITION_71088,
  STOPCONDITION_71089,
  STOPCONDITION_71090,
  STOPCONDITION_71091,
  STOPCONDITION_71092,
  STOPCONDITION_71093,
  STOPCONDITION_71094,
  STOPCONDITION_71095,
  STOPCONDITION_71096,
  STOPCONDITION_71097,
  STOPCONDITION_71098,
  STOPCONDITION_71099,
  STOPCONDITION_71100,
  STOPCONDITION_71101,
  STOPCONDITION_71102,
  STOPCONDITION_71103,
  STOPCONDITION_71104,
  STOPCONDITION_71105,
  STOPCONDITION_71106,
  STOPCONDITION_71107,
  STOPCONDITION_71108,
  STOPCONDITION_71109,
  STOPCONDITION_71110,
  STOPCONDITION_71111,
  STOPCONDITION_71112,
  STOPCONDITION_71113,
  STOPCONDITION_71114,
  STOPCONDITION_71115,
  STOPCONDITION_71116,
  STOPCONDITION_71117,
  STOPCONDITION_71118,
  STOPCONDITION_71119,
  STOPCONDITION_71120,
  STOPCONDITION_71121,
  STOPCONDITION_71122,
  STOPCONDITION_71123,
  STOPCONDITION_71124,
  STOPCONDITION_71125,
  STOPCONDITION_71126,
  STOPCONDITION_71127,
  STOPCONDITION_71128,
  STOPCONDITION_71129,
  STOPCONDITION_71130,
  STOPCONDITION_71131,
  STOPCONDITION_71132,
  STOPCONDITION_71133,
  STOPCONDITION_71134,
  STOPCONDITION_71135,
  STOPCONDITION_71136,
  STOPCONDITION_71137,
  STOPCONDITION_71138,
  STOPCONDITION_71139,
  STOPCONDITION_71140,
  STOPCONDITION_71141,
  STOPCONDITION_71142,
  STOPCONDITION_71143,
  STOPCONDITION_71144,
  STOPCONDITION_71145,
  STOPCONDITION_71146,
  STOPCONDITION_71147,
  STOPCONDITION_71148,
  STOPCONDITION_71149,
  STOPCONDITION_71150,
  STOPCONDITION_71151,
  STOPCONDITION_71152,
  STOPCONDITION_71153,
  STOPCONDITION_71154,
  STOPCONDITION_71155,
  STOPCONDITION_71156,
  STOPCONDITION_71157,
  STOPCONDITION_71158,
  STOPCONDITION_71159,
  STOPCONDITION_71160,
  STOPCONDITION_71161,
  STOPCONDITION_71162,
  STOPCONDITION_71163,
  

  STOPCONDITION_71200, // max control deviation
  STOPCONDITION_71201, // timeout closing
  STOPCONDITION_71202, // sensor defect flow demand
  STOPCONDITION_71203, // sensor defect flow value
  STOPCONDITION_71204, // timeout opening

  STOPCONDITION_71205,
  STOPCONDITION_71206,
  STOPCONDITION_71207,
  STOPCONDITION_71208,
  STOPCONDITION_71209,
  STOPCONDITION_71210,
  STOPCONDITION_71211,
  STOPCONDITION_71212,
  STOPCONDITION_71213,
  STOPCONDITION_71214,

  STOPCONDITION_71215,
  STOPCONDITION_71216,
  STOPCONDITION_71217,
  STOPCONDITION_71218,
  STOPCONDITION_71219,
  STOPCONDITION_71220,

  STOPCONDITION_71301,
  STOPCONDITION_71302,
  STOPCONDITION_71303,
  STOPCONDITION_71311,
  STOPCONDITION_71312,
  STOPCONDITION_71313,
  STOPCONDITION_71314,
  STOPCONDITION_71315,
  STOPCONDITION_71316,
  STOPCONDITION_71317,
  STOPCONDITION_71318,
  STOPCONDITION_71319,
  STOPCONDITION_71320,
  STOPCONDITION_71321,
  STOPCONDITION_71322,
  STOPCONDITION_71323,
  STOPCONDITION_71324,
  STOPCONDITION_71325,
  STOPCONDITION_71326,
  STOPCONDITION_71327,
  STOPCONDITION_71328,
  STOPCONDITION_71329,
  STOPCONDITION_71330,
  STOPCONDITION_71331,
  STOPCONDITION_71332,
  STOPCONDITION_71333,
  STOPCONDITION_71334,

  STOPCONDITION_73000, // Misfire: Cylinder 1
  STOPCONDITION_73001, // Misfire: Cylinder 2
  STOPCONDITION_73002, // Misfire: Cylinder 3
  STOPCONDITION_73003, // Misfire: Cylinder 4
  STOPCONDITION_73004, // Misfire: Cylinder 5
  STOPCONDITION_73005, // Misfire: Cylinder 6
  STOPCONDITION_73006, // Misfire: Cylinder 7
  STOPCONDITION_73007, // Misfire: Cylinder 8
  STOPCONDITION_73008, // Misfire: Cylinder 9
  STOPCONDITION_73009, // Misfire: Cylinder 10
  STOPCONDITION_73010, // Misfire: Cylinder 11
  STOPCONDITION_73011, // Misfire: Cylinder 12
  STOPCONDITION_73012, // Misfire: More than one cylinder
  STOPCONDITION_73013, // Misfire: Device error
  STOPCONDITION_73014, // Misfire: Wrong status

  STOPCONDITION_75000, // Profibus recover

  STOPCONDITION_80000, // catalyst in manual mode

// rmiDEIF    STOPCONDITION_80001,	// not used
// rmiDEIF    STOPCONDITION_80011,	// not used


  // AGC4-Modbus slave address 31
  STOPCONDITION_83100,
  STOPCONDITION_83101,
  //STOPCONDITION_83102,
  STOPCONDITION_83103,
  STOPCONDITION_83104,
  STOPCONDITION_83105,
  STOPCONDITION_83106,
  STOPCONDITION_83107,
  STOPCONDITION_83108,
  STOPCONDITION_83109,
  STOPCONDITION_83110,
  STOPCONDITION_83111,
  STOPCONDITION_83112,
  STOPCONDITION_83113,
  STOPCONDITION_83114,
  STOPCONDITION_83115,
  // AGC4-Modbus slave address 32
  STOPCONDITION_83200,
  STOPCONDITION_83201,
  STOPCONDITION_83202,
  STOPCONDITION_83203,
  STOPCONDITION_83204,
  STOPCONDITION_83205,
  STOPCONDITION_83206,
  STOPCONDITION_83207,
  STOPCONDITION_83208,
  STOPCONDITION_83209,
  STOPCONDITION_83210,
  STOPCONDITION_83211,
  STOPCONDITION_83212,
  STOPCONDITION_83213,
  STOPCONDITION_83214,
  STOPCONDITION_83215,
  // AGC4-Modbus slave address 33
  STOPCONDITION_83300,
  STOPCONDITION_83301,
  STOPCONDITION_83302,
  STOPCONDITION_83303,
  STOPCONDITION_83304,
  STOPCONDITION_83305,
  STOPCONDITION_83306,
  STOPCONDITION_83307,
  STOPCONDITION_83308,
  STOPCONDITION_83309,
  STOPCONDITION_83310,
  STOPCONDITION_83311,
  STOPCONDITION_83312,
  STOPCONDITION_83313,
  STOPCONDITION_83314,
  STOPCONDITION_83315,
  // AGC4-Modbus slave address 34
  //STOPCONDITION_83400,
  STOPCONDITION_83401,
  STOPCONDITION_83402,
  STOPCONDITION_83403,
  STOPCONDITION_83404,
  STOPCONDITION_83405,
  STOPCONDITION_83406,
  STOPCONDITION_83407,
  STOPCONDITION_83408,
  STOPCONDITION_83409,
  STOPCONDITION_83410,
  //STOPCONDITION_83411,
  STOPCONDITION_83412,
  STOPCONDITION_83413,
  //STOPCONDITION_83414,
  //STOPCONDITION_83415,
  // AGC4-Modbus slave address 35
  //STOPCONDITION_83500,
  //STOPCONDITION_83501,
  //STOPCONDITION_83502,
  //STOPCONDITION_83503,
  //STOPCONDITION_83504,
  //STOPCONDITION_83505,
  STOPCONDITION_83506,
  STOPCONDITION_83507,
  STOPCONDITION_83508,
  STOPCONDITION_83509,
  STOPCONDITION_83510,
  STOPCONDITION_83511,
  STOPCONDITION_83512,
  STOPCONDITION_83513,
  STOPCONDITION_83514,
  STOPCONDITION_83515,
  // AGC4-Modbus slave address 36
  STOPCONDITION_83600,
  STOPCONDITION_83601,
  STOPCONDITION_83602,
  STOPCONDITION_83603,
  STOPCONDITION_83604,
  //STOPCONDITION_83605,
  //STOPCONDITION_83606,
  //STOPCONDITION_83607,
  //STOPCONDITION_83608,
  //STOPCONDITION_83609,
  //STOPCONDITION_83610,
  //STOPCONDITION_83611,
  //STOPCONDITION_83612,
  //STOPCONDITION_83613,
  //STOPCONDITION_83614,
  //STOPCONDITION_83615,
  // AGC4-Modbus slave address 37
  //STOPCONDITION_83700,
  //STOPCONDITION_83701,
  //STOPCONDITION_83702,
  STOPCONDITION_83703,
  //STOPCONDITION_83704,
  //STOPCONDITION_83705,
  //STOPCONDITION_83706,
  //STOPCONDITION_83707,
  //STOPCONDITION_83708,
  //STOPCONDITION_83709,
  //STOPCONDITION_83710,
  //STOPCONDITION_83711,
  //STOPCONDITION_83712,
  //STOPCONDITION_83713,
  //STOPCONDITION_83714,
  //STOPCONDITION_83715,
  // AGC4-Modbus slave address 38
  //STOPCONDITION_83800,
  //STOPCONDITION_83801,
  //STOPCONDITION_83802,
  //STOPCONDITION_83803,
  //STOPCONDITION_83804,
  //STOPCONDITION_83805,
  //STOPCONDITION_83806,
  //STOPCONDITION_83807,
  //STOPCONDITION_83808,
  //STOPCONDITION_83809,
  //STOPCONDITION_83810,
  STOPCONDITION_83811,
  STOPCONDITION_83812,
  //STOPCONDITION_83813,
  STOPCONDITION_83814,
  STOPCONDITION_83815,
  // AGC4-Modbus slave address 39
  //STOPCONDITION_83900,
  //STOPCONDITION_83901,
  //STOPCONDITION_83902,
  //STOPCONDITION_83903,
  //STOPCONDITION_83904,
  STOPCONDITION_83905,
  STOPCONDITION_83906,
  //STOPCONDITION_83907,
  //STOPCONDITION_83908,
  //STOPCONDITION_83909,
  //STOPCONDITION_83910,
  //STOPCONDITION_83911,
  //STOPCONDITION_83912,
  //STOPCONDITION_83913,
  //STOPCONDITION_83914,
  //STOPCONDITION_83915,


  STOPCONDITION_100000, // prelim. SC "dummy stopcondition"

  // configurable SC

  //60 parameterizable messages (ATTENTION: the next STOPCONDTION is used as start-reference-value in MES.c)
  STOPCONDITION_100001,
  STOPCONDITION_100002,
  STOPCONDITION_100003,
  STOPCONDITION_100004,
  STOPCONDITION_100005,
  STOPCONDITION_100006,
  STOPCONDITION_100007,
  STOPCONDITION_100008,
  STOPCONDITION_100009,
  STOPCONDITION_100010,
  STOPCONDITION_100011,
  STOPCONDITION_100012,
  STOPCONDITION_100013,
  STOPCONDITION_100014,
  STOPCONDITION_100015,
  STOPCONDITION_100016,
  STOPCONDITION_100017,
  STOPCONDITION_100018,
  STOPCONDITION_100019,
  STOPCONDITION_100020,
  STOPCONDITION_100021,
  STOPCONDITION_100022,
  STOPCONDITION_100023,
  STOPCONDITION_100024,
  STOPCONDITION_100025,
  STOPCONDITION_100026,
  STOPCONDITION_100027,
  STOPCONDITION_100028,
  STOPCONDITION_100029,
  STOPCONDITION_100030,
  STOPCONDITION_100031,
  STOPCONDITION_100032,
  STOPCONDITION_100033,
  STOPCONDITION_100034,
  STOPCONDITION_100035,
  STOPCONDITION_100036,
  STOPCONDITION_100037,
  STOPCONDITION_100038,
  STOPCONDITION_100039,
  STOPCONDITION_100040,
  STOPCONDITION_100041,
  STOPCONDITION_100042,
  STOPCONDITION_100043,
  STOPCONDITION_100044,
  STOPCONDITION_100045,
  STOPCONDITION_100046,
  STOPCONDITION_100047,
  STOPCONDITION_100048,
  STOPCONDITION_100049,
  STOPCONDITION_100050,
  STOPCONDITION_100051,
  STOPCONDITION_100052,
  STOPCONDITION_100053,
  STOPCONDITION_100054,
  STOPCONDITION_100055,
  STOPCONDITION_100056,
  STOPCONDITION_100057,
  STOPCONDITION_100058,
  STOPCONDITION_100059,
  STOPCONDITION_100060,
  //60 parameterizable messages

  //60 parameterizable messages (ATTENTION: the next STOPCONDTION is used as start-reference-value in MES.c)
  STOPCONDITION_100101,
  STOPCONDITION_100102,
  STOPCONDITION_100103,
  STOPCONDITION_100104,
  STOPCONDITION_100105,
  STOPCONDITION_100106,
  STOPCONDITION_100107,
  STOPCONDITION_100108,
  STOPCONDITION_100109,
  STOPCONDITION_100110,
  STOPCONDITION_100111,
  STOPCONDITION_100112,
  STOPCONDITION_100113,
  STOPCONDITION_100114,
  STOPCONDITION_100115,
  STOPCONDITION_100116,
  STOPCONDITION_100117,
  STOPCONDITION_100118,
  STOPCONDITION_100119,
  STOPCONDITION_100120,
  STOPCONDITION_100121,
  STOPCONDITION_100122,
  STOPCONDITION_100123,
  STOPCONDITION_100124,
  STOPCONDITION_100125,
  STOPCONDITION_100126,
  STOPCONDITION_100127,
  STOPCONDITION_100128,
  STOPCONDITION_100129,
  STOPCONDITION_100130,
  STOPCONDITION_100131,
  STOPCONDITION_100132,
  STOPCONDITION_100133,
  STOPCONDITION_100134,
  STOPCONDITION_100135,
  STOPCONDITION_100136,
  STOPCONDITION_100137,
  STOPCONDITION_100138,
  STOPCONDITION_100139,
  STOPCONDITION_100140,
  STOPCONDITION_100141,
  STOPCONDITION_100142,
  STOPCONDITION_100143,
  STOPCONDITION_100144,
  STOPCONDITION_100145,
  STOPCONDITION_100146,
  STOPCONDITION_100147,
  STOPCONDITION_100148,
  STOPCONDITION_100149,
  STOPCONDITION_100150,
  STOPCONDITION_100151,
  STOPCONDITION_100152,
  STOPCONDITION_100153,
  STOPCONDITION_100154,
  STOPCONDITION_100155,
  STOPCONDITION_100156,
  STOPCONDITION_100157,
  STOPCONDITION_100158,
  STOPCONDITION_100159,
  STOPCONDITION_100160,
  //60 parameterizable messages

    //20 configurable analogue inputs CAI (wirebreak)
    STOPCONDITION_101001,
    STOPCONDITION_101002,
    STOPCONDITION_101003,
    STOPCONDITION_101004,
    STOPCONDITION_101005,
    STOPCONDITION_101006,
    STOPCONDITION_101007,
    STOPCONDITION_101008,
    STOPCONDITION_101009,
    STOPCONDITION_101010,
    STOPCONDITION_101011,
    STOPCONDITION_101012,
    STOPCONDITION_101013,
    STOPCONDITION_101014,
    STOPCONDITION_101015,
    STOPCONDITION_101016,
    STOPCONDITION_101017,
    STOPCONDITION_101018,
    STOPCONDITION_101019,
    STOPCONDITION_101020,
    STOPCONDITION_101021,
    STOPCONDITION_101022,
    STOPCONDITION_101023,
    STOPCONDITION_101024,
    //20 configurable analogue inputs CAI (wirebreak)

    //20 configurable analogue inputs CAI (overload)
    STOPCONDITION_101051,
    STOPCONDITION_101052,
    STOPCONDITION_101053,
    STOPCONDITION_101054,
    STOPCONDITION_101055,
    STOPCONDITION_101056,
    STOPCONDITION_101057,
    STOPCONDITION_101058,
    STOPCONDITION_101059,
    STOPCONDITION_101060,
    STOPCONDITION_101061,
    STOPCONDITION_101062,
    STOPCONDITION_101063,
    STOPCONDITION_101064,
    STOPCONDITION_101065,
    STOPCONDITION_101066,
    STOPCONDITION_101067,
    STOPCONDITION_101068,
    STOPCONDITION_101069,
    STOPCONDITION_101070,
    STOPCONDITION_101071,
    STOPCONDITION_101072,
    STOPCONDITION_101073,
    STOPCONDITION_101074,
    //20 configurable analogue inputs CAI (overload)

    //20 configurable analogue inputs CAI (1)
    STOPCONDITION_101101,
    STOPCONDITION_101102,
    STOPCONDITION_101103,
    STOPCONDITION_101104,
    STOPCONDITION_101105,
    STOPCONDITION_101106,
    STOPCONDITION_101107,
    STOPCONDITION_101108,
    STOPCONDITION_101109,
    STOPCONDITION_101110,
    STOPCONDITION_101111,
    STOPCONDITION_101112,
    STOPCONDITION_101113,
    STOPCONDITION_101114,
    STOPCONDITION_101115,
    STOPCONDITION_101116,
    STOPCONDITION_101117,
    STOPCONDITION_101118,
    STOPCONDITION_101119,
    STOPCONDITION_101120,
    STOPCONDITION_101121,
    STOPCONDITION_101122,
    STOPCONDITION_101123,
    STOPCONDITION_101124,
    //20 configurable analogue inputs CAI (1)

    //20 configurable analogue inputs CAI (2)
    STOPCONDITION_101201,
    STOPCONDITION_101202,
    STOPCONDITION_101203,
    STOPCONDITION_101204,
    STOPCONDITION_101205,
    STOPCONDITION_101206,
    STOPCONDITION_101207,
    STOPCONDITION_101208,
    STOPCONDITION_101209,
    STOPCONDITION_101210,
    STOPCONDITION_101211,
    STOPCONDITION_101212,
    STOPCONDITION_101213,
    STOPCONDITION_101214,
    STOPCONDITION_101215,
    STOPCONDITION_101216,
    STOPCONDITION_101217,
    STOPCONDITION_101218,
    STOPCONDITION_101219,
    STOPCONDITION_101220,
    STOPCONDITION_101221,
    STOPCONDITION_101222,
    STOPCONDITION_101223,
    STOPCONDITION_101224,
    //20 configurable analogue inputs CAI (2)

    //20 configurable analogue inputs CAI (3)
    STOPCONDITION_101301,
    STOPCONDITION_101302,
    STOPCONDITION_101303,
    STOPCONDITION_101304,
    STOPCONDITION_101305,
    STOPCONDITION_101306,
    STOPCONDITION_101307,
    STOPCONDITION_101308,
    STOPCONDITION_101309,
    STOPCONDITION_101310,
    STOPCONDITION_101311,
    STOPCONDITION_101312,
    STOPCONDITION_101313,
    STOPCONDITION_101314,
    STOPCONDITION_101315,
    STOPCONDITION_101316,
    STOPCONDITION_101317,
    STOPCONDITION_101318,
    STOPCONDITION_101319,
    STOPCONDITION_101320,
    STOPCONDITION_101321,
    STOPCONDITION_101322,
    STOPCONDITION_101323,
    STOPCONDITION_101324,
    //20 configurable analogue inputs CAI (3)

    //20 configurable analogue inputs CAI (4)
    STOPCONDITION_101401,
    STOPCONDITION_101402,
    STOPCONDITION_101403,
    STOPCONDITION_101404,
    STOPCONDITION_101405,
    STOPCONDITION_101406,
    STOPCONDITION_101407,
    STOPCONDITION_101408,
    STOPCONDITION_101409,
    STOPCONDITION_101410,
    STOPCONDITION_101411,
    STOPCONDITION_101412,
    STOPCONDITION_101413,
    STOPCONDITION_101414,
    STOPCONDITION_101415,
    STOPCONDITION_101416,
    STOPCONDITION_101417,
    STOPCONDITION_101418,
    STOPCONDITION_101419,
    STOPCONDITION_101420,
    STOPCONDITION_101421,
    STOPCONDITION_101422,
    STOPCONDITION_101423,
    STOPCONDITION_101424,
    //20 configurable analogue inputs CAI (4)

    //20 configurable analogue inputs CAI (sensor defect)
    STOPCONDITION_101501,
    STOPCONDITION_101502,
    STOPCONDITION_101503,
    STOPCONDITION_101504,
    STOPCONDITION_101505,
    STOPCONDITION_101506,
    STOPCONDITION_101507,
    STOPCONDITION_101508,
    STOPCONDITION_101509,
    STOPCONDITION_101510,
    STOPCONDITION_101511,
    STOPCONDITION_101512,
    STOPCONDITION_101513,
    STOPCONDITION_101514,
    STOPCONDITION_101515,
    STOPCONDITION_101516,
    STOPCONDITION_101517,
    STOPCONDITION_101518,
    STOPCONDITION_101519,
    STOPCONDITION_101520,
    STOPCONDITION_101521,
    STOPCONDITION_101522,
    STOPCONDITION_101523,
    STOPCONDITION_101524,
    //20 configurable analogue inputs CAI (sensor defect)

    //20 configurable analogue inputs TMP (wirebreak)
    STOPCONDITION_102001,
    STOPCONDITION_102002,
    STOPCONDITION_102003,
    STOPCONDITION_102004,
    STOPCONDITION_102005,
    STOPCONDITION_102006,
    STOPCONDITION_102007,
    STOPCONDITION_102008,
    STOPCONDITION_102009,
    STOPCONDITION_102010,
    STOPCONDITION_102011,
    STOPCONDITION_102012,
    STOPCONDITION_102013,
    STOPCONDITION_102014,
    STOPCONDITION_102015,
    STOPCONDITION_102016,
    STOPCONDITION_102017,
    STOPCONDITION_102018,
    STOPCONDITION_102019,
    STOPCONDITION_102020,
    //20 configurable analogue inputs TMP (wirebreak)

    //20 configurable analogue inputs TMP (shortcircuit)
    STOPCONDITION_102051,
    STOPCONDITION_102052,
    STOPCONDITION_102053,
    STOPCONDITION_102054,
    STOPCONDITION_102055,
    STOPCONDITION_102056,
    STOPCONDITION_102057,
    STOPCONDITION_102058,
    STOPCONDITION_102059,
    STOPCONDITION_102060,
    STOPCONDITION_102061,
    STOPCONDITION_102062,
    STOPCONDITION_102063,
    STOPCONDITION_102064,
    STOPCONDITION_102065,
    STOPCONDITION_102066,
    STOPCONDITION_102067,
    STOPCONDITION_102068,
    STOPCONDITION_102069,
    STOPCONDITION_102070,
    //20 configurable analogue inputs TMP (shortcircuit)

    //20 configurable analogue inputs TMP (1)
    STOPCONDITION_102101,
    STOPCONDITION_102102,
    STOPCONDITION_102103,
    STOPCONDITION_102104,
    STOPCONDITION_102105,
    STOPCONDITION_102106,
    STOPCONDITION_102107,
    STOPCONDITION_102108,
    STOPCONDITION_102109,
    STOPCONDITION_102110,
    STOPCONDITION_102111,
    STOPCONDITION_102112,
    STOPCONDITION_102113,
    STOPCONDITION_102114,
    STOPCONDITION_102115,
    STOPCONDITION_102116,
    STOPCONDITION_102117,
    STOPCONDITION_102118,
    STOPCONDITION_102119,
    STOPCONDITION_102120,
    //20 configurable analogue inputs TMP (1)

    //20 configurable analogue inputs TMP (2)
    STOPCONDITION_102201,
    STOPCONDITION_102202,
    STOPCONDITION_102203,
    STOPCONDITION_102204,
    STOPCONDITION_102205,
    STOPCONDITION_102206,
    STOPCONDITION_102207,
    STOPCONDITION_102208,
    STOPCONDITION_102209,
    STOPCONDITION_102210,
    STOPCONDITION_102211,
    STOPCONDITION_102212,
    STOPCONDITION_102213,
    STOPCONDITION_102214,
    STOPCONDITION_102215,
    STOPCONDITION_102216,
    STOPCONDITION_102217,
    STOPCONDITION_102218,
    STOPCONDITION_102219,
    STOPCONDITION_102220,
    //20 configurable analogue inputs TMP (2)

    //20 configurable analogue inputs TMP (3)
    STOPCONDITION_102301,
    STOPCONDITION_102302,
    STOPCONDITION_102303,
    STOPCONDITION_102304,
    STOPCONDITION_102305,
    STOPCONDITION_102306,
    STOPCONDITION_102307,
    STOPCONDITION_102308,
    STOPCONDITION_102309,
    STOPCONDITION_102310,
    STOPCONDITION_102311,
    STOPCONDITION_102312,
    STOPCONDITION_102313,
    STOPCONDITION_102314,
    STOPCONDITION_102315,
    STOPCONDITION_102316,
    STOPCONDITION_102317,
    STOPCONDITION_102318,
    STOPCONDITION_102319,
    STOPCONDITION_102320,
    //20 configurable analogue inputs TMP (3)

    //20 configurable analogue inputs TMP (4)
    STOPCONDITION_102401,
    STOPCONDITION_102402,
    STOPCONDITION_102403,
    STOPCONDITION_102404,
    STOPCONDITION_102405,
    STOPCONDITION_102406,
    STOPCONDITION_102407,
    STOPCONDITION_102408,
    STOPCONDITION_102409,
    STOPCONDITION_102410,
    STOPCONDITION_102411,
    STOPCONDITION_102412,
    STOPCONDITION_102413,
    STOPCONDITION_102414,
    STOPCONDITION_102415,
    STOPCONDITION_102416,
    STOPCONDITION_102417,
    STOPCONDITION_102418,
    STOPCONDITION_102419,
    STOPCONDITION_102420,
    //20 configurable analogue inputs TMP (4)

    //20 configurable analogue inputs TMP (sensor defect)
    STOPCONDITION_102501,
    STOPCONDITION_102502,
    STOPCONDITION_102503,
    STOPCONDITION_102504,
    STOPCONDITION_102505,
    STOPCONDITION_102506,
    STOPCONDITION_102507,
    STOPCONDITION_102508,
    STOPCONDITION_102509,
    STOPCONDITION_102510,
    STOPCONDITION_102511,
    STOPCONDITION_102512,
    STOPCONDITION_102513,
    STOPCONDITION_102514,
    STOPCONDITION_102515,
    STOPCONDITION_102516,
    STOPCONDITION_102517,
    STOPCONDITION_102518,
    STOPCONDITION_102519,
    STOPCONDITION_102520,
    //20 configurable analogue inputs TMP (sensor defect)
  
  STOPCONDITION_LAST  
  } t_STOPCONDITION;  

// total number of StopConditions:
#define STOPCONDITION_ARRAY_SIZE		(STOPCONDITION_LAST+1)		// rmiBOPS

// defines for the SC BitMask bits:
// ===============================
// - regular stop
#define STOP_BITMASK_REGULAR_STOP		STOP_BIT_MASK_BIT1
// - trip generator breaker
#define STOP_BITMASK_TRIP_GCB			STOP_BIT_MASK_BIT2
// - isl-bit (island operation) 
//   (SC doesn't effect actualLevel and actualBitMask if this bit is set)
#define STOP_BITMASK_ISLAND				0x0080
// - mains relevant: SC only relevant if we are Mains Delomatic
#define STOP_BITMASK_MAINS_RELEVANT		0x0200

#define STOP_BITMASK_ARC_SAFE_MODE		0x0400

// - block start
#define STOP_BITMASK_BLOCK_START		STOP_BIT_MASK_BIT12
// - AGC4 Grid-Protection
#define STOP_BITMASK_AGC4_GRID_PROT		STOP_BIT_MASK_BIT13

// - Fan flushing
#define STOP_BITMASK_FAN_FLUSHING       STOP_BIT_MASK_BIT14

// - Trip GCB without delay
#define STOP_BM_GBC_UNDELAYED_TRIP      STOP_BIT_MASK_BIT15

// - Alarm is not used
#define STOP_BITMASK_NOT_USED           STOP_BIT_MASK_BIT16

// Alarm states for showing the stop conditions
// RESET   = The reason for the Alarm is not present. It has never appeared or has been acknowledged.
// ACTIVE  = The reason for the STC is present. It has not been acknowledged. In this state it is not allowed to 
//           acknowledge the STC.
// PERSISTING = The reason for the STC is gone. So it can now be acknowledged.
// 

/* declaration of the global struct STOP. with all members used by other parts of the application */
struct s_commonStopVariables
{
   DU16 	numberOfConditions;
   DU8  	actualLevel;
   DU16 	actualBitMask;
   DS16 	actualIndex;
   DU16 	actualCode;
   DU8* 	actualText;
   DBOOL	AtLeastOneScSet;		// needed for fault text in HMI_MainState, rmi100322

   DBOOL	NovUpdateRequired;

   DU16  BlockDOMask;
   DBOOL BlockDO[BLOCK_DO_TOTAL];

   // input
   DBOOL DI_AlarmInhibit;

   // output
   DBOOL DO_AlarmBlock[5];
};

/* declaration and initialisation of all Stop Conditions for this application */
struct s_OneStopCondition
{   
	DU32 Code;
	DU8  Level;
	DU16 BitMask;
	DU8* Text;
};	


//---------------------------------definitions for logging stop-conditions------------------

#define SC_LOG_NUMBER_OF_LINES  500 //number of lines to log

// stc
typedef struct
{
	DBOOL 		STOPFlag[STOPCONDITION_ARRAY_SIZE];
   DTIMESTAMP	STOPTime[STOPCONDITION_ARRAY_SIZE];
}t_nov_stc;
extern t_nov_stc STC;
// stc log
typedef struct
{
	DU16 SC_Log_pointer;								//actual pointer in log-record
	t_SC_LogLine SC_Log[SC_LOG_NUMBER_OF_LINES];		//logging-record for stop-conditions
}t_nov_stc_log;
extern t_nov_stc_log STCLog;

extern t_SC_LogLine STOP_GetLog (DU16 STOPIndex);
extern DBOOL        STOP_GetFlag (DU16 STOPIndex);
extern DTIMESTAMP   STOP_GetTime (DU16 STOPIndex);

//---------------------------------definitions for logging stop-conditions------------------

extern struct s_commonStopVariables STOP;
extern struct s_OneStopCondition STOPCondition[STOPCONDITION_ARRAY_SIZE];
extern DBOOL STOP_is_Set( DU16 enum_identifier );
extern DBOOL STOP_Tripped[STOPCONDITION_ARRAY_SIZE];                     // determines if the SC can be acknowledged
extern void STOP_Set( DU16 enum_identifier );                 /* make one Sc active using its code */
extern void STOP_Clear( DU16 enum_identifier );               /* make one Sc inactive using its code */
extern void STOP_ClearLevel( DU8 level_of_StopCondition );               /* clear an entier level 0..7 of Sc's */
extern void STOP_ResetAllLevels( void ); 								 /* reset and clear all Sc, rmiRED */
extern void STOP_ClearAllLevels( void ); 								 /* clear all Sc, rmiSPT */
extern void STOP_ClearLevels( DU8 firstlevelOfSc, DU8 secondlevelOfSc ); /* clear all Sc between 2 levels */
extern void STOP_ClearLevelsFromRemote( DU8 firstlevelOfSc, DU8 secondlevelOfSc ); /* Clear levels from remote operater, preserves all local operator set stopconditions */
extern void STOP_ClearLevelsWithoutCertianStopCond( DU8 firstlevelOfSc, DU8 secondlevelOfSc, t_STOPCONDITION enum_NotClear );
extern void STOP_ClearCertainBit( DU16 RefMask );                        /* clear all Stopconditions, which include a Bit which is set in the reference Mask */
extern DU16 STOP_findIndex( DU16 RefMask );                  			 /* find the Index of the first active Stopcondition, where the Bitmask is set */
extern void STOP_init(void);                                             /* initialize the module after power up */
extern void STOP_initialize(void);										 /* intiialization of code, level, bitmask and text */
extern void STOP_defineCommonValues(void);                               /* set STOP.commonLevel, STOP.commonBitMask, etc */
extern void STOP_UpdateLevelAndBitmask(void);                            /* update STOP.commonLevel, STOP.commonBitMask, etc */

extern DU16 STOP_Get_Index(DU32 stopcondition_code);

extern DBOOL STOP_GetTripped(DU16 SCIndex);
extern void  STOP_SetTripped(DU16 SCIndex, DBOOL Set);
extern DU32  STOP_GetCode(DU16 SCIndex);
extern void  STOP_SetCode(DU16 SCIndex, DU32 Code);
extern DU8   STOP_GetLevel(DU16 SCIndex);
extern void  STOP_SetLevel(DU16 SCIndex, DU8 Level);
extern DU16  STOP_GetBitMask(DU16 SCIndex);
extern void  STOP_SetBitMask(DU16 SCIndex, DU16 BitMask);
extern DU8*  STOP_GetText(DU16 SCIndex);
extern void  STOP_SetText(DU16 SCIndex, DU8* pText);
extern void  STOP_SetSC(DU16 SCIndex, struct s_OneStopCondition SC);

// Configuration of el. protections

#define SC_BIT0    0x00000001
#define SC_BIT1    0x00000002
#define SC_BIT2    0x00000004
#define SC_BIT3    0x00000008
#define SC_BIT4    0x00000010
#define SC_BIT5    0x00000020
#define SC_BIT6    0x00000040
#define SC_BIT7    0x00000080
#define SC_BIT8    0x00000100
#define SC_BIT9    0x00000200
#define SC_BIT10   0x00000400
#define SC_BIT11   0x00000800
#define SC_BIT12   0x00001000
#define SC_BIT13   0x00002000
#define SC_BIT14   0x00004000
#define SC_BIT15   0x00008000

#define SC_BIT16   0x00010000
#define SC_BIT17   0x00020000
#define SC_BIT18   0x00040000
#define SC_BIT19   0x00080000
#define SC_BIT20   0x00100000
#define SC_BIT21   0x00200000
#define SC_BIT22   0x00400000
#define SC_BIT23   0x00800000
#define SC_BIT24   0x01000000
#define SC_BIT25   0x02000000
#define SC_BIT26   0x04000000
#define SC_BIT27   0x08000000
#define SC_BIT28   0x10000000
#define SC_BIT29   0x20000000
#define SC_BIT30   0x40000000
#define SC_BIT31   0x80000000

// GRID_PROTECTION
#define NBR_CONFIG_GRID_PROT	25
#define SC_ENABLE_30674         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT0 ))
#define SC_ENABLE_30675         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT1 ))
#define SC_ENABLE_30671         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT2 ))
#define SC_ENABLE_30672         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT3 ))
#define SC_ENABLE_30673         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT4 ))
#define SC_ENABLE_30670         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT5 ))
#define SC_ENABLE_30667         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT6 ))
#define SC_ENABLE_30668         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT7 ))
#define SC_ENABLE_30665         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT8 ))
#define SC_ENABLE_30666         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT9 ))
#define SC_ENABLE_30661         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT10))
#define SC_ENABLE_30660         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT11))
#define SC_ENABLE_30676         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT12))
#define SC_ENABLE_30677         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT13))
#define SC_ENABLE_30669         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT14))
#define SC_ENABLE_30663         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT15))
#define SC_ENABLE_30664         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT16))
#define SC_ENABLE_30657         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT17))
#define SC_ENABLE_30662         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT18))
#define SC_ENABLE_30654         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT19))
#define SC_ENABLE_30655         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT20))
#define SC_ENABLE_30651         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT21))
#define SC_ENABLE_30652         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT22))
#define SC_ENABLE_30653         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT23))
#define SC_ENABLE_30650         (TRUE && (PARA[ParRefInd[CONFIG_GRID_PROT__PARREFIND]].Value & SC_BIT24))

// GEN_PROTECTION
#define NBR_CONFIG_GEN_PROT		20
#define SC_ENABLE_20503         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT0 ))
#define SC_ENABLE_20502         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT1 ))
#define SC_ENABLE_20506         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT2 ))
#define SC_ENABLE_20504         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT3 ))
#define SC_ENABLE_20505         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT4 ))
#define SC_ENABLE_30634         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT5 ))
#define SC_ENABLE_30635         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT6 ))
#define SC_ENABLE_30636         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT7 ))
#define SC_ENABLE_30678         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT8 ))
#define SC_ENABLE_30656         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT9 ))
#define SC_ENABLE_30630         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT10))
#define SC_ENABLE_30631         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT11))
#define SC_ENABLE_50070         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT12))
#define SC_ENABLE_30638         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT13))
#define SC_ENABLE_30639         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT14))
#define SC_ENABLE_30632         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT15))
#define SC_ENABLE_30633         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT16))
#define SC_ENABLE_70680         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT17))
#define SC_ENABLE_50680         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT18))
#define SC_ENABLE_50679         (TRUE && (PARA[ParRefInd[CONFIG_GEN_PROT__PARREFIND ]].Value & SC_BIT19))

extern DU16 STOP_GetSC_ConfigElProt( DU16 RefInd, DU8 cnt);

extern void STOPCONDITIONS_control_100ms(void);
extern void STOPCONDITIONS_control_1000ms(void);

extern DBOOL DO_STOP_AcknowledgeExtDevices;
extern DBOOL DO_STOP_CollectiveWarning;
extern DBOOL DO_STOP_CollectiveFault;

/* definition of all Stopconditions by Symbols instead of Index to avoid direct Index reference in the codemodules */
/* any new StopCondition is just added to the end */
/* while deletion of all unused Stopconditions is problematic, since the entire listt has to be reedited !!! */

// for acknowledge of mains, rmi100809
struct STOP_protection
{
	t_protection_state State;
    t_protection_state LastState;
    DU32               StateTimer;
    DBOOL              Exceeded;
};
extern struct STOP_protection Acknowledge;
extern DBOOL AcknowledgeMains;
extern DBOOL STOP_SignalAcknowledgeMains;			// signal for mains delomatic to acknowledge

extern struct STOP_protection AcknowledgeExt;
extern DBOOL AcknowledgeExtDevices;

// on time for ARCbit to acknowledge mains, rmi100809
#define STOP_ACKNOWLEGDE_MAINS_ON_TIME 1000L

// on time for digital output to acknowledge external devices
#define STOP_ACKNOWLEGDE_ON_TIME 3000L


#endif	/* STOPCONDITIONS_H_ */
